| SchemeEvaluator |;

SchemeEvaluator = Object createWith:
{
	"eval:inEnv:", [ :eval: :inEnv: |
		| res thiz |; thiz = this;
		res = SchemeNil;
		(eval isSchemeCons)
			ifTrue:
			[
				res = thiz evalSchemeCons: eval inEnv: inEnv
			];
		(eval isSchemeSymbol)
			ifTrue:
			[
				res = thiz evalSchemeSymbol: eval inEnv: inEnv
			];
		(eval isSchemeString)
			ifTrue:
			[
				res = thiz evalSchemeString: eval inEnv: inEnv
			];
		(eval isSchemeNil)
			ifTrue:
			[
				res = thiz evalSchemeNil: eval inEnv: inEnv
			];
		(eval isSchemeNumber)
			ifTrue:
			[
				res = thiz evalSchemeNumber: eval inEnv: inEnv
			];
		res
	],
	"evalArgsRest:inEnv:", [ :evalArgsRest: :inEnv: |
		| thiz |; thiz = this;
		evalArgsRest isSchemeNil
			ifTrue:
			[
				SchemeNil
			]
			ifFalse:
			[
				SchemeCons
					car: (thiz eval: (evalArgsRest getCar) inEnv: inEnv)
					cdr: (thiz evalArgsRest: (evalArgsRest getCdr) inEnv: inEnv)
			]
	],
	"evalSchemeCons:inEnv:", [ :evalSchemeCons: :inEnv: |
		| thiz func res |; thiz = this;
		func = thiz eval: (evalSchemeCons getCar) inEnv: inEnv;
		func isSchemeBuiltin
			ifTrue:
			[
				res = (func getMethod) callInEnv: inEnv withArgs: (evalSchemeCons getCdr)
			];
		func isSchemeFunction
			ifTrue:
			[
				| args newEnv |;
				args = thiz evalArgsRest: (evalSchemeCons getCdr) inEnv: inEnv;
				newEnv = SchemeEnv newWithParentEnv: inEnv;
				func isWithArg
					ifTrue:
					[
						newEnv createVar: (func getArg) value: args
					];
				func isWithArgs
					ifTrue:
					[
						| tempRest tempRestNames |;
						tempRest = args;
						tempRestNames = func getArgs;
						
						While
							isTrue:
							[
								(tempRest isSchemeNil not) and: (tempRestNames isSchemeNil not)
							]
							do:
							[
								newEnv createVar: (tempRestNames getCar) value: (tempRest getCar);
								tempRestNames = tempRestNames getCdr;
								tempRest = tempRest getCdr
							];
						
						((tempRest isSchemeNil not) xor: (tempRestNames isSchemeNil not))
							ifTrue:
							[
								Out writeLine: "SchemeFunction: invalid amount of parameters!"
							]
						
					];
				res = thiz eval: (func getExpr) inEnv: newEnv
			];
		res
	],
	"evalSchemeSymbol:inEnv:", [ :evalSchemeSymbol: :inEnv: |
		inEnv getVar: (evalSchemeSymbol getName)
	],
	"evalSchemeString:inEnv:", [ :evalSchemeString: :inEnv: |
		evalSchemeString
	],
	"evalSchemeNil:inEnv:", [ :evalSchemeNil: :inEnv: |
		SchemeNil
	],
	"evalSchemeNumber:inEnv:", [ :evalSchemeNumber: :inEnv: |
		evalSchemeNumber
	],
};

Env installGlobalVarName: "SchemeEvaluator" withValue: SchemeEvaluator;

SchemeEvaluator

